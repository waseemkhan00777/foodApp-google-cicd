# steps:
#   # Build the container image
#   - name: gcr.io/cloud-builders/docker
#     args:
#       ["build", "-t", "gcr.io/$PROJECT_ID/${_SERVICE_NAME}:${SHORT_SHA}", "."]
#     id: Building the container image
#   # Push the container image to Container Registry
#   - name: "gcr.io/cloud-builders/docker"
#     args: ["push", "gcr.io/$PROJECT_ID/${_SERVICE_NAME}:${SHORT_SHA}"]
#     id: Pushing the image to registry
#   # Deploy container image to Cloud Run
#   - name: "gcr.io/cloud-builders/gcloud"
#     args:
#       [
#         "run",
#         "deploy",
#         "${_SERVICE_NAME}",
#         "--image",
#         "gcr.io/$PROJECT_ID/${_SERVICE_NAME}:${SHORT_SHA}",
#         "--region",
#         "us-central1",
#         "--platform",
#         "managed",
#         "--allow-unauthenticated",
#       ]

# Copyright 2020 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

steps:
  ###Build App###
  # 4 Displaying Google Id
  - id: Setup Google Project ID
    name: 'ubuntu'
    entrypoint: bash
    env:
      - 'GCLOUD_SERVICE_KEY=${_SERVICE_ACCOUNT}'
      - 'project_name=${PROJECT_ID}'
      # - 'GOOGLE_PROJECT_ID=${!project_name}'
    args:
      - -c
      - |
        echo ${PROJECT_ID}
  # 5 Storing service account key
  - name: 'ubuntu'
    entrypoint: bash
    id: Store Service Account
    args:
      - -c
      - |
        echo ${!GCLOUD_SERVICE_KEY} | base64 --decode --ignore-garbage > /workspace/gcloud-service-key.json
  # 6 Python version display
  - name: python
    id: Python Version check
    entrypoint: python3
    args: ['--version']
  # 11
  # - name: python
  #   id: Install Dependencies
  #   entrypoint: pip
  #   args: ["install", "-r", "requirements.txt", "--user"]
  ###Build App Ends here###
  ###Build Hosting####
  # - id: build-hosting
  # - id: Configure Firebase Project Alias
  #   name:
  # # Firebase project aliases, stored in .firebaserc, must match GitHub branch names
  #   args:
  #     - echo FIREBASE_ALIAS=staging
  # - name:
  #   id: Check BASH_ENV
  #   args:
  #     - curl -sL https://firebase.tools | bash
  # # name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'coverage!
  # - name:
  #   id: Get Firebase Config
  #   args:
  #     - firebase use $FIREBASE_ALIAS
  # - name:
  #   id: Save Firebase Config
  #   args:
  #     - firebase functions:config:get > .name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'imeconfig.json
  - name: 'ubuntu'
    entrypoint: bash
    args: ['rm -f node_modules/.yarn.integrity']
    # error of no such file or directory
  - name: node
    id: node-install hosting
    entrypoint: yarn
    args: ['install', '--non-interactive', '--production=false']
  # - name: node
  #   id: Run Typecheck
  #   entrypoint: yarn
  #   args: ['run', 'typecheck']
  # - name: node
  #   entrypoint: yarn
  #   id: Run Linting Check
  #   args: [ 'run', 'lint']
  # - name: node
  #   entrypoint: yarn
  #   id: Run Tests
  #   timeout: "2700s"
  #   args: [ 'run', 't:c']
  ###Build Hosting ends here###

  ###Build Functions###
  - name: node
    id: Check npm version
    entrypoint: npm
    args: ['--version']
  - name: node
    id: node-install function
    entrypoint: yarn
    args: ['install', '--production=false', '--force']
  # - name: node
  #   id: Run Typecheck
  #   entrypoint: npm
  #   args: ['run', 'typecheck']
  # - name: node
  #   entrypoint: npm
  #   id: Run Linting Check
  #   args: [ 'run', 'lint']
  # - name: node
  #   entrypoint: npm
  #   id: Run Coverage Tests
  #   args: [ 'run', 'coverage']
  ###Build Functions ends here###

  ###Build Dataflow###
  # - name: "python"
  #   id: Install tox
  #   entrypoint: pip
  #   args: ["install", "tox"]
  # - name: "python"
  #   id: Run Tests using tox
  #   args: ["tox"]
  ###Build Dataflow ends here###

  ###Deploy Dataflow###
  - id: Setup Google Project ID Deploy dataflow
    name: 'ubuntu'
    entrypoint: bash
    env:
      - 'GCLOUD_SERVICE_KEY=${BRANCH_NAME}_google_service_account'
      - 'project_name=${BRANCH_NAME}_branch'
      # - 'GOOGLE_PROJECT_ID=${!project_name}'
      - 'GOOGLE_APPLICATION_CREDENTIALS=/workspaces/gcloud-service-key.json'
      # - 'GCPProject=${GOOGLE_PROJECT_ID}'
      - 'GCSBucketName="mari-${BRANCH_NAME}-sftp-outflow"'
    args:
      - -c
      - |
        echo project_name
        echo GCLOUD_SERVICE_KEY
        echo GOOGLE_APPLICATION_CREDENTIALS
        echo GCPProject
        echo GCSBucketName
  # - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:404.0.0'
  #   id: Setup GCLOUD Auth
  #   entrypoint: gcloud
  #   args:
  #     - -c
  #     - |
  #       gcloud auth activate-service-account \
  #         --key-file=/workspace/gcloud-service-key.json
  #       gcloud --quiet config set project ${PROJECT_ID}
  # - name: python
  #   id: Deploy Attendance Pipeline
  #   args:
  #     - -c
  #     - |
  #       ./deployAttendanceCSV.sh
  # - name: python
  #   id: Deploy Course Pipeline
  #   args:
  #     - -c
  #     - |
  #       ./deployCoursesCSV.sh
  # - name: python
  #   id: Deploy Enrollment Pipeline
  #   args:
  #     - -c
  #     - |
  #       ./deployEnrollmentsCSV.sh
  # - name: python
  #   id: Deploy Grades Pipeline
  #   args:
  #     - -c
  #     - |
  #       ./deployGradesCSV.sh
  # - name: python
  #   id: Deploy Khan Pipeline
  #   args:
  #     - -c
  #     - |
  #       ./deployKhanActivities.sh
  # - name: python
  #   id: Deploy Schools Pipeline
  #   args:
  #     - -c
  #     - |
  #       ./deploySchoolCSV.sh
  # - name: python
  #   id: Deploy Sections Pipeline
  #   args:
  #     - -c
  #     - |
  #       ./deploySectionsCSV.sh
  # - name: python
  #   id: Deploy Staff Pipeline
  #   args:
  #     - -c
  #     - |
  #       ./deployStaffCSV.sh
  # - name: python
  #   id: Deploy Student Pipeline
  #   args:
  #     - -c
  #     - |
  #       ./deployStudentCSV.sh
  # - name: python
  #   id: Deploy Term Pipeline
  #   args:
  #     - -c
  #     - |
  #       ./deployTermCSV.sh
  # - name: python
  #   id: Deploy VasolCeds Pipeline
  #   args:
  #     - -c
  #     - |
  #       ./deployVasolCedsCSV.sh
  # - name: python
  #   id: Deploy Discipline Pipeline
  #   args:
  #     - -c
  #     - |
  #       ./deployDisciplineCSV.sh
  ###Deploy Dataflow ends here###

  ###Deploy Hosting###
  - name: node
    id: Install Webpack CLI
    entrypoint: yarn
    args: ['add', '-D', 'webpack-cli@4.10.0']
  - name: node
    id: Install Dependencies Hosting
    entrypoint: yarn
    args: ['install', '--production=false']
  # - name: ubuntu
  #   entrypoint: bash
  #   args: [ 'set', '-eo', 'pipefail' ]
  - name: ubuntu
    entrypoint: bash
    id: Building Module 1/3
    timeout: '45000s'
    args:
      - -c
      - |
        echo "Clearing Existing Build Artifacts" && \
        rm -rf build
  - name: ubuntu
    entrypoint: bash
    id: Building Module 2/3
    args:
      - -c
      - |
        echo "Running Webpack Build"
  # - name: node
  #   entrypoint: npm
  #   timeout: '45000s'
  #   args: [ 'run', 'webpack', '--env', 'prod=true', '--progress' ]
  # - name: node
  #   entrypoint: npm
  #   id: Building Module 3/3
  #   timeout: '4500s'
  #   args:
  #     - -c
  #     - |
  #       echo "Copying Resources" && \
  #       run copy-build-resources
  # - name: 'gcr.io/$PROJECT_ID/firebase'
  #   id: Deploying Firebase Hosting
  #   args: ['deploy', '--project=$PROJECT_ID', '--only=hosting']
  ###Deploy Hosting ends here###

  ###Deploy Functions###
  - id: Setup Environment variables
    name: 'ubuntu'
    entrypoint: bash
    env:
      - 'GCLOUD_SERVICE_KEY=${BRANCH_NAME}_google_service_account'
      - 'project_name=${BRANCH_NAME}_branch'
      # - 'GOOGLE_PROJECT_ID=${!project_name}'
      - 'GOOGLE_APPLICATION_CREDENTIALS=/workspaces/gcloud-service-key.json'
      # - 'GCPProject=${GOOGLE_PROJECT_ID}'
      - 'GCSBucketName="mari-${BRANCH_NAME}-sftp-outflow"'
    args:
      - -c
      - |
        echo project_name
        echo GCLOUD_SERVICE_KEY
        echo GOOGLE_APPLICATION_CREDENTIALS
        echo GCPProject
        echo GCSBucketName

# - name: node
#   id: Building Cloud Funtions
#   entrypoint: yarn
#   args: ['build']
# - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
#   id: Deploying Indexes
#   args: [ 'deploy', '--only firestore:indexes']
# - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
#   id: Deploying PersonIdentity Cloud Functions
#   args: [ 'deploy', '--only functions:personIdentityScript', '--force', '--debug']
# - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
#   id: Deploying PermissionsScript Cloud Functions
#   args: [ 'deploy', '--only functions:permissionsScript', '--force', '--debug']
# - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
#   id: Deploying Search Cloud Functions
#   args: [ 'deploy', '--only functions:searchTriggers', '--force', '--debug']
# - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
#   id: Deploying XAPI Cloud Functions
#   args: [ 'deploy', '--only functions:xapi', '--force', '--debug']
# - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
#   id: Deploying Tasks Cloud Functions
#   args: [ 'deploy', '--only functions:pipelines', '--force', '--debug']
# - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
#   id: Deploying Admin Cloud Functions
#   args: [ 'deploy', '--only functions:adminTriggers,functions:admin', '--force', '--debug']
# - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
#   id: Deploying Assessment Cloud Functions
#   args: [ 'deploy', '--only functions:assessmentTriggers', '--force', '--debug']
# - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
#   id: Deploying Chef Cloud Functions
#   args: [ 'deploy', '--only functions:chefTriggers,functions:chef', '--force', '--debug']
# - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
#   id: Deploying GraphQL Cloud Functions
#   args: [ 'deploy', '--only functions:graphqlTriggers,functions:gql', '--force', '--debug']
# - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
#   id: Deploying Import Export Cloud Functions
#   args: [ 'deploy', '--only functions:importExport', '--force', '--debug']
# - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
#   id: Deploying Khan Cloud Functions
#   args: [ 'deploy', '--only functions:khanTriggers,functions:khan', '--force', '--debug']
# - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
#   id: Deploying Launchpad Cloud Functions
#   args: [ 'deploy', '--only functions:launchpadTriggers,functions:launchpad', '--force', '--debug']
# - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
#   id: Deploying SFTP Cloud Functions
#   args: [ 'deploy', '--only functions:sftpTriggers,functions:sftp', '--force', '--debug']
# - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
#   id: Deploying Utility Cloud Functions
#   args: [ 'deploy', '--only functions:utilTriggers', '--force', '--debug']
# - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
#   id: Deploying Reports Cloud Functions
#   args: [ 'deploy', '--only functions:reports', '--force', '--debug']
# ###Deploy Function ends here###

# ###Deploy App###
# - id: Setup Environment variables Deploy App
#   name: 'ubuntu'
#   entrypoint: bash
#   env:
#     - 'GCLOUD_SERVICE_KEY=${BRANCH_NAME}_google_service_account'
#     - 'project_name=${BRANCH_NAME}_branch'
#     - 'GOOGLE_PROJECT_ID=${!project_name}'
#     - 'GOOGLE_APPLICATION_CREDENTIALS=/workspaces/gcloud-service-key.json'
#     - 'GCPProject=${GOOGLE_PROJECT_ID}'
#     - 'GCSBucketName="mari-${BRANCH_NAME}-sftp-outflow"'
#   args:
#     - -c
#     - |
#       echo project_name
#       echo GOOGLE_PROJECT_ID
#       echo GCLOUD_SERVICE_KEY
#       echo GOOGLE_APPLICATION_CREDENTIALS
#       echo GCPProject
#       echo GCSBucketName
# - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
#   entrypoint: gcloud
#   id: App Deploy
#   args: [ 'app', 'deploy', '--version="${BRANCH_NAME//[_]/-}']
# - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
#   id: Cron Deploy
#   entrypoint: gcloud
#   args: [ 'app', 'deploy', 'cron.yaml', '--version=${BRANCH_NAME//[_]/-}-cron']
# ###Deploy App ends here###

# ###Deploy Workflows###
# - id: Setup Environment variables Deploy Workflows
#   name: 'ubuntu'
#   entrypoint: bash
#   env:
#     - 'GCLOUD_SERVICE_KEY=${BRANCH_NAME}_google_service_account'
#     - 'project_name=${BRANCH_NAME}_branch'
#     - 'GOOGLE_PROJECT_ID=${!project_name}'
#     - 'GOOGLE_APPLICATION_CREDENTIALS=/workspaces/gcloud-service-key.json'
#     - 'GCPProject=${GOOGLE_PROJECT_ID}'
#     - 'GCSBucketName="mari-${BRANCH_NAME}-sftp-outflow"'
#   args:
#     - -c
#     - |
#       echo project_name
#       echo GOOGLE_PROJECT_ID
#       echo GCLOUD_SERVICE_KEY
#       echo GOOGLE_APPLICATION_CREDENTIALS
#       echo GCPProject
#       echo GCSBucketName
# - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
#   entrypoint: gcloud
#   id: Import Workflow Persons Deploy
#   args: [ 'workflows', 'deploy', 'import-workflow-persons', '--location=us-central1', '--source=./importPersons/import-workflow-persons.yaml']
# - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
#   id: Import Workflow Firestore Backup
#   entrypoint: gcloud
#   args: [ 'workflows', 'deploy', 'export-firestore-documents', '--location=us-central1', '--source=./exportFirestoreDocuments/export-firestore-documents.yaml']
###Deploy Workflows ends here###
